//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeCard.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class timecardEntities : DbContext
    {
        public timecardEntities()
            : base("name=timecardEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Carrier> Carriers { get; set; }
        public virtual DbSet<EarnedVacationTime> EarnedVacationTimes { get; set; }
        public virtual DbSet<EntryTime> EntryTimes { get; set; }
        public virtual DbSet<LaborCategory> LaborCategories { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectCategory> ProjectCategories { get; set; }
        public virtual DbSet<ProjectUserCategory> ProjectUserCategories { get; set; }
        public virtual DbSet<StartDate> StartDates { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserProjectReport> UserProjectReports { get; set; }
        public virtual DbSet<VacationBank> VacationBanks { get; set; }
    
        public virtual ObjectResult<EntryTime_AddUpdateEntryTime_sp_Result> EntryTime_AddUpdateEntryTime_sp(string statementType, Nullable<int> id, Nullable<int> projectUserCategory_Id, Nullable<System.DateTime> date, string type, Nullable<double> hour, Nullable<int> is_Approved, Nullable<int> is_Authorize, Nullable<System.DateTime> created_At, Nullable<int> entryTime_Id, string rejectReason, string deleteReason)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var projectUserCategory_IdParameter = projectUserCategory_Id.HasValue ?
                new ObjectParameter("ProjectUserCategory_Id", projectUserCategory_Id) :
                new ObjectParameter("ProjectUserCategory_Id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var hourParameter = hour.HasValue ?
                new ObjectParameter("Hour", hour) :
                new ObjectParameter("Hour", typeof(double));
    
            var is_ApprovedParameter = is_Approved.HasValue ?
                new ObjectParameter("Is_Approved", is_Approved) :
                new ObjectParameter("Is_Approved", typeof(int));
    
            var is_AuthorizeParameter = is_Authorize.HasValue ?
                new ObjectParameter("Is_Authorize", is_Authorize) :
                new ObjectParameter("Is_Authorize", typeof(int));
    
            var created_AtParameter = created_At.HasValue ?
                new ObjectParameter("Created_At", created_At) :
                new ObjectParameter("Created_At", typeof(System.DateTime));
    
            var entryTime_IdParameter = entryTime_Id.HasValue ?
                new ObjectParameter("EntryTime_Id", entryTime_Id) :
                new ObjectParameter("EntryTime_Id", typeof(int));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var deleteReasonParameter = deleteReason != null ?
                new ObjectParameter("DeleteReason", deleteReason) :
                new ObjectParameter("DeleteReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EntryTime_AddUpdateEntryTime_sp_Result>("EntryTime_AddUpdateEntryTime_sp", statementTypeParameter, idParameter, projectUserCategory_IdParameter, dateParameter, typeParameter, hourParameter, is_ApprovedParameter, is_AuthorizeParameter, created_AtParameter, entryTime_IdParameter, rejectReasonParameter, deleteReasonParameter);
        }
    
        public virtual ObjectResult<Carrier> sp_GetAll_Carriers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carrier>("sp_GetAll_Carriers");
        }
    
        public virtual ObjectResult<Carrier> sp_GetAll_Carriers(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carrier>("sp_GetAll_Carriers", mergeOption);
        }
    
        public virtual ObjectResult<EarnedVacationTime> sp_GetAll_EarnedVacationTimes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EarnedVacationTime>("sp_GetAll_EarnedVacationTimes");
        }
    
        public virtual ObjectResult<EarnedVacationTime> sp_GetAll_EarnedVacationTimes(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EarnedVacationTime>("sp_GetAll_EarnedVacationTimes", mergeOption);
        }
    
        public virtual ObjectResult<EntryTime> sp_GetAll_EntryTimes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EntryTime>("sp_GetAll_EntryTimes");
        }
    
        public virtual ObjectResult<EntryTime> sp_GetAll_EntryTimes(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EntryTime>("sp_GetAll_EntryTimes", mergeOption);
        }
    
        public virtual ObjectResult<LaborCategory> sp_GetAll_LaborCategorys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LaborCategory>("sp_GetAll_LaborCategorys");
        }
    
        public virtual ObjectResult<LaborCategory> sp_GetAll_LaborCategorys(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LaborCategory>("sp_GetAll_LaborCategorys", mergeOption);
        }
    
        public virtual ObjectResult<ProjectCategory> sp_GetAll_ProjectCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectCategory>("sp_GetAll_ProjectCategories");
        }
    
        public virtual ObjectResult<ProjectCategory> sp_GetAll_ProjectCategories(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectCategory>("sp_GetAll_ProjectCategories", mergeOption);
        }
    
        public virtual ObjectResult<Project> sp_GetAll_Projects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Project>("sp_GetAll_Projects");
        }
    
        public virtual ObjectResult<Project> sp_GetAll_Projects(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Project>("sp_GetAll_Projects", mergeOption);
        }
    
        public virtual ObjectResult<ProjectUserCategory> sp_GetAll_ProjectUserCategorys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectUserCategory>("sp_GetAll_ProjectUserCategorys");
        }
    
        public virtual ObjectResult<ProjectUserCategory> sp_GetAll_ProjectUserCategorys(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectUserCategory>("sp_GetAll_ProjectUserCategorys", mergeOption);
        }
    
        public virtual ObjectResult<StartDate> sp_GetAll_StartDates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StartDate>("sp_GetAll_StartDates");
        }
    
        public virtual ObjectResult<StartDate> sp_GetAll_StartDates(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StartDate>("sp_GetAll_StartDates", mergeOption);
        }
    
        public virtual ObjectResult<UserProjectReport> sp_GetAll_UserProjectReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserProjectReport>("sp_GetAll_UserProjectReports");
        }
    
        public virtual ObjectResult<UserProjectReport> sp_GetAll_UserProjectReports(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserProjectReport>("sp_GetAll_UserProjectReports", mergeOption);
        }
    
        public virtual ObjectResult<User> sp_GetAll_Users()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("sp_GetAll_Users");
        }
    
        public virtual ObjectResult<User> sp_GetAll_Users(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("sp_GetAll_Users", mergeOption);
        }
    
        public virtual ObjectResult<VacationBank> sp_GetAll_VacationBanks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VacationBank>("sp_GetAll_VacationBanks");
        }
    
        public virtual ObjectResult<VacationBank> sp_GetAll_VacationBanks(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VacationBank>("sp_GetAll_VacationBanks", mergeOption);
        }
    
        public virtual ObjectResult<VacationBank_AddUpdateVacationBank_sp_Result> VacationBank_AddUpdateVacationBank_sp(string statementType, Nullable<int> id, Nullable<double> vacationHoursPerYear, Nullable<double> accuralVacationHours, Nullable<int> payperiodCount, Nullable<int> is_Authorize, Nullable<int> user_Id, Nullable<System.DateTime> created_Date)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var vacationHoursPerYearParameter = vacationHoursPerYear.HasValue ?
                new ObjectParameter("VacationHoursPerYear", vacationHoursPerYear) :
                new ObjectParameter("VacationHoursPerYear", typeof(double));
    
            var accuralVacationHoursParameter = accuralVacationHours.HasValue ?
                new ObjectParameter("AccuralVacationHours", accuralVacationHours) :
                new ObjectParameter("AccuralVacationHours", typeof(double));
    
            var payperiodCountParameter = payperiodCount.HasValue ?
                new ObjectParameter("PayperiodCount", payperiodCount) :
                new ObjectParameter("PayperiodCount", typeof(int));
    
            var is_AuthorizeParameter = is_Authorize.HasValue ?
                new ObjectParameter("Is_Authorize", is_Authorize) :
                new ObjectParameter("Is_Authorize", typeof(int));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var created_DateParameter = created_Date.HasValue ?
                new ObjectParameter("Created_Date", created_Date) :
                new ObjectParameter("Created_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VacationBank_AddUpdateVacationBank_sp_Result>("VacationBank_AddUpdateVacationBank_sp", statementTypeParameter, idParameter, vacationHoursPerYearParameter, accuralVacationHoursParameter, payperiodCountParameter, is_AuthorizeParameter, user_IdParameter, created_DateParameter);
        }
    }
}
